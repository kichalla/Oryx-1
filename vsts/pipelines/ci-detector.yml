resources:
- repo: self

variables:
- group: Oryx

stages:
  - stage: ValidatePipeline
    displayName: Validate Pipeline
    jobs:
    - job: ValidatePipeline
      displayName: Validate pipeline
      pool:
        name: OryxLinux
      variables:
        skipComponentGovernanceDetection: true
      steps:
      - script: |
          set -x
          if [ "$(Build.Reason)" != "Manual" ]; then
            echo
            echo "Invalid configuration."
            echo "Build should be Manual"
            exit 1
          fi
          if [ "$(Build.DefinitionName)" != "Oryx-Detector-CI" ]; then
            echo
            echo "Invalid configuration."
            echo "Build definition name should be Oryx-Detector-CI."
            exit 1
          fi
          if [[ "$(Build.SourceBranch)" != "refs/heads/master" ]] \
          && [[ "$(Build.SourceBranch)" != refs/heads/kichalla* ]]; then
            echo
            echo "Invalid configuration."
            echo 'Only 'master' and 'patch/*' branches are allowed.'
            exit 1
          fi
        displayName: 'Validate pipeline run'

  - stage: Build
    displayName: Build Stage
    dependsOn: ValidatePipeline
    jobs:
    - job: Job_SignBinariesAndPackages
      displayName: Sign Detector Binaries and NuGet packages
      pool:
        name: VSEng-MicroBuildVS2017
        demands:
        - msbuild
        - visualstudio
      variables:
        skipComponentGovernanceDetection: true
      steps:
      - template: templates/_signBinaryDetector.yml
    - job: Job_BuildAndTestDetector
      displayName: Build and test detector
      pool:
        name: OryxLinux
      steps:
      - template: templates/_buildTemplateDetector.yml
      
  - stage: Release
    displayName: Release Stage
    dependsOn: Build
    jobs:
    - job: Release_GitHub
      displayName: Create GitHub release
      pool:
        name: OryxLinux
      variables:
        skipComponentGovernanceDetection: true
      steps:
      - checkout: self
        clean: true
      - task: DownloadPipelineArtifact@2
        displayName: 'Download artifacts to publish to release'
        inputs:
          artifactName: 'detector_signed'
          path: $(Build.ArtifactStagingDirectory)/detector_signed
      - bash: |
          . build/__detectorNugetPackagesVersions.sh
          echo "Setting release name to '$releaseName'..."
          echo "##vso[task.setvariable variable=RELEASE_NAME;]$VERSION"
        displayName: 'Set relase name environment variable'
      #- task: NuGetCommand@2
      #  displayName: 'Push nuget packages to nuget.org'
      #  inputs:
      #    command: 'push'
      #    packagesToPush: '$(Build.ArtifactStagingDirectory)/detector_signed/packages/*.nupkg;!$(Build.ArtifactStagingDirectory)/detector_signed/packages/*.symbols.nupkg'
      #    nuGetFeedType: 'external'
      #    publishFeedCredentials: 'OryxNugetOrg'
      - task: GitHubRelease@0
        displayName: 'GitHub release (create)'
        inputs:
          gitHubConnection: 'Oryx-GitHub'
          repositoryName: kichalla/Oryx-1
          tagSource: manual
          tag: '$(RELEASE_NAME)'
          assets: $(Build.ArtifactStagingDirectory)/detector_signed/packages/*.nupkg
trigger: none