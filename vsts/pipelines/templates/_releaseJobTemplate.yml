jobs:
- job: Release_BuildImage
  displayName: Push Build Image to MCR
  pool:
    name: OryxLinux
  variables:
    skipComponentGovernanceDetection: true
  timeoutInMinutes: 300
  steps:
  - script: |
      echo "##vso[task.setvariable variable=ReleaseBuildImages;]true"
      echo "##vso[task.setvariable variable=ReleaseRuntimeImages;]false"
    displayName: 'Set variables'
      
  - template: _releaseStepTemplate.yml

- job: Release_RuntimeImages
  displayName: Push Runtime Images to MCR
  pool:
    name: OryxLinux
  variables:
    skipComponentGovernanceDetection: true
  timeoutInMinutes: 400
  steps:
  - script: |
      echo "##vso[task.setvariable variable=ReleaseBuildImages;]false"
      echo "##vso[task.setvariable variable=ReleaseRuntimeImages;]true"
    displayName: 'Set variables'
      
  - template: _releaseStepTemplate.yml

- job: Release_PlatformSDKs
  displayName: Publish SDKs from dev to prod storage account
  dependsOn: 
    - Release_BuildImage
    - Release_RuntimeImages
  pool:
    name: OryxLinux
  variables:
    skipComponentGovernanceDetection: true
  timeoutInMinutes: 300
  steps:
  - task: ShellScript@2
    displayName: 'Publish SDKs from dev to prod storage account'
    env:
      DEV_STORAGE_SAS_TOKEN: $(DEV-STORAGE-SAS-TOKEN)
      PROD_STORAGE_SAS_TOKEN: $(PROD-STORAGE-SAS-TOKEN)
    inputs:
      scriptPath: ./vsts/scripts/publishSdksFromDevToProdStorageAccount.sh
  - task: ShellScript@2
    displayName: 'Test Prod storage account'
    inputs:
      scriptPath: ./build/testIntegration.sh
      args: StorageAccountTests=Prod

- job: Release_GitHub
  displayName: Create GitHub release
  dependsOn: 
    - Release_PlatformSDKs
  pool:
    name: OryxLinux
  variables:
    skipComponentGovernanceDetection: true

  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Oryx binaries to publish to release'
    inputs:
      artifactName: 'signed_binaries'
      path: $(Build.SourcesDirectory)/artifacts

  - template: _setReleaseTag.yml

  - task: GitHubRelease@0
    displayName: 'GitHub release (create)'
    inputs:
      gitHubConnection: 'Oryx-GitHub'
      repositoryName: Microsoft/Oryx
      tagSource: manual
      tag: '$(RELEASE_TAG_NAME)'
      assets: $(Build.SourcesDirectory)/artifacts/oryx_linux_x64.tar.gz
  