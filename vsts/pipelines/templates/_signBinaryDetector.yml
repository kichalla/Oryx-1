steps:
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection - OSS Compliance'
  inputs:
    ignoreDirectories: '$(Build.SourcesDirectory)/tests'

- powershell: |
   Write-Host "##vso[task.setvariable variable=SignType;isOutput=true]real"
  name: setSignTypeVariable
  displayName: 'Set sign binary variable'
  condition: >
   and(in(variables['Build.Reason'], 'Schedule', 'Manual'), eq(variables['Build.DefinitionName'], 'Oryx-Detector-CI'), 
   or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/heads/kichalla/' )))

- task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
  displayName: 'Install Signing Plugin'
  inputs:
    signType: '$(setSignTypeVariable.SignType)'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- powershell: |
    $sdkVersion="2.1.806"
    Write-Host "Settng .NET Core SDK version variable to $sdkVersion"
    Write-Host "##vso[task.setvariable variable=DotNetCoreSdkVersion]$sdkVersion"
  displayName: 'Setting .NET Core SDK version as a variable for later tasks'

- task: UseDotNet@2
  displayName: 'Installing .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '$(DotNetCoreSdkVersion)'

- powershell: |
    Write-Host "Creating global.json with sdk version $(DotNetCoreSdkVersion)..."
    dotnet new globaljson --force --sdk-version $(DotNetCoreSdkVersion)

    Write-Host "Setting up git_commit and build_number as env variable"
    $env:GIT_COMMIT=$(git rev-parse HEAD)
    $env:BUILD_NUMBER=$env:BUILD_BUILDNUMBER
    $projectFile="src\Detector\Detector.csproj"
    
    dotnet build Detector.sln -c Release
  displayName: 'Build Detector.sln'

- task: PowerShell@2
  displayName: 'Re-package already generated NuGet packages with signed binaries'
  inputs:
    Path: 'vsts\scripts\createNuGetPackages.ps1'

- task: VSBuild@1
  displayName: 'Sign NuGet packages'
  inputs:
    solution: 'vsts/nugetpackages.signproj'
    msbuildArgs: '/t:SignFiles /p:MicroBuild_SigningEnabled=true'

- powershell: |
    Copy-Item -Path artifacts\packages -Destination $(Build.ArtifactStagingDirectory)\packages -Recurse
  displayName: 'Copying nuget packages to artifact staging directory'

- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    artifactName: 'Detector'
    targetPath: '$(Build.ArtifactStagingDirectory)'